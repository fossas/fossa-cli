- arguments: [-XTypeApplications, -XNumericUnderscores]
# Often, code is more readable with extra parens, or less readable with list comprehensions
- ignore: {name: "Redundant bracket"}
- ignore: {name: "Use list comprehension"}

# Import Preferences
- modules:
  - {name: Data.Set, as: Set, message: "Use complete name for qualified import of Set"}
  - {name: Data.Map, as: Map, message: "Use complete name for qualified import of Map"}
  - {name: Data.Map.Strict, as: Map, message: "Use complete name for qualified import of Strict Map"}
  - {name: Data.Text, as: Text, message: "Use complete name for qualified import of Text"}
  # Don't allow unsafe IO
  - {name: System.IO.Unsafe, within: []}

# Styling Preferences
- suggest: {lhs: "asum [x, y]", rhs: x <|> y}
- suggest: {lhs: return x, rhs: pure x}
- suggest: {lhs: () <$ x, rhs: Control.Monad.void x}
- suggest: {lhs: x <&> f, rhs: f <$> x}
- suggest: {lhs: Data.Text.pack x, rhs: Data.String.Conversion.toText x}
- suggest: {lhs: Data.Text.unpack x, rhs: Data.String.Conversion.toString x}
- suggest: {lhs: Data.List.foldl x, rhs: Data.List.foldl' x}
- suggest: {lhs: "(Data.Set.size x) == 0" , rhs: "Data.Set.null x"}
- suggest: {lhs: "(Data.Set.size x) /= 0" , rhs: "not $ Data.Set.null x"}

# Forbidden items, only allowed in compile-time code, or test code (however, it should be avoided in tests as much as possible).
- functions:
  - {name: error, within: [Data.String.Conversion, Control.Effect.Replay]}
  - {name: undefined, within: []}
  - {name: Prelude.head, within: [Control.Effect.Replay.TH, Control.Effect.Record.TH], message: "Use Data.List.Extra.head' instead."}
  - {name: Prelude.tail, within: []}
  - {name: Prelude.init, within: []}
  - {name: Prelude.last, within: []}
  - {name: Data.ByteString.head, within: []}
  - {name: Data.Bytestring.tail, within: []}
  - {name: Data.Bytestring.init, within: []}
  - {name: Data.Bytestring.last, within: []}
  - {name: Data.Text.head, within: []}
  - {name: Data.Text.tail, within: []}
  - {name: Data.Text.init, within: []}
  - {name: Data.Text.last, within: []}
  - {name: "Prelude.!!", within: []}
  - {name: "Data.Map.!", within: []}
    # TODO: remove the need to special-case this test module.
  - {name: fromJust, within: [App.DocsSpec]}
  - {name: Test.Hspec.fdescribe, within: []}
    # We define fit' in terms of fit,so this is necessary
  - {name: Test.Hspec.fit, within: [Test.Effect]}
  - {name: Test.Hspec.focus, within: []}
  - {name: Test.Hspec.fspecify, within: []}
  - {name: Test.Hspec.fcontext, within: []}
