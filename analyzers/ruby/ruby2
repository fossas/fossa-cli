package ruby

const (
	AnalyzerName = "ruby"

	ListStrategy         = "list"
	LockfileStratgey     = "lockfile"
	ListLockfileStrategy = "list-lockfile"
)

var RubyAnalyzer = module.AnalyzerV2{
	Name:         AnalyzerName,
	DiscoverFunc: NewDiscover,
	Strategies: module.Strategies{
		Named: map[module.StrategyName]module.Strategy{
			ListStrategy:         AnalyzeYarnCmd,
			LockfileStratgey:     AnalyzeNpmCmd,
			ListLockfileStrategy: AnalyzeYarnLock,
		},
		Optimal: []module.StrategyName{YarnStrategy, NpmStrategy, YarnLockStrategy, NpmLockStrategy},
		SortedNames: []module.StrategyName{
			ListLockfileStrateg,
			ListStrategy,
			LockfileStratgey,
		},
	},
}

func NewDiscover(dir module.Filepath) (map[module.Filepath]module.DiscoveredStrategies, *errors.Error) {
	log.WithField("dir", dir).Debug("discovering modules")
	modules := make(map[module.Filepath]module.DiscoveredStrategies)
	err := filepath.Walk(dir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			log.WithError(err).WithField("path", path).Debug("error while walking for discovery")
			return err
		}

		addStrategy := func(name module.StrategyName) {
			moduleDir := filepath.Dir(path)
			current, ok := modules[moduleDir]
			if !ok {
				current = make(module.DiscoveredStrategies)
			}
			current[name] = info.Name()
			modules[moduleDir] = current
		}

		if info.IsDir() && info.Name() == "node_modules" {
			addStrategy(NodeModulesStrategy)
		}

		// Don't descend into **/node_modules and **/bower_components
		if info.IsDir() && (info.Name() == "node_modules" || info.Name() == "bower_components") {
			log.Debugf("Skipping directory: %s", info.Name())
			return filepath.SkipDir
		}

		if !info.IsDir() && info.Name() == "package.json" {
			addStrategy(PackageJsonStrategy)
			addStrategy(NpmStrategy)
		}

		if !info.IsDir() && info.Name() == "yarn.lock" {
			addStrategy(YarnLockStrategy)
			addStrategy(YarnStrategy)
		}

		if !info.IsDir() && info.Name() == "package-lock.json" {
			addStrategy(NpmLockStrategy)
			addStrategy(NpmStrategy)
		}

		return nil
	})

	if err != nil {
		return nil, errors.UnknownError(err, "could not find NodeJS projects")
	}

	return modules, nil
}
