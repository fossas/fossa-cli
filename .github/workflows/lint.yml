name: Static analysis
on: push

jobs:
  # Run linter and format checkers independently, so you see errors from both.
  linter-check:
    name: linter-check
    runs-on: ubuntu-latest
    container: ghcr.io/fossas/haskell-dev-tools:9.4.7

    steps:
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy, rustfmt

      - uses: actions/checkout@v2

      - name: Run hlint
        run: |
          make lint

  link-check:
    name: link-check
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Check Markdown links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: "yes"
          config-file: ".markdown-link-check.json"

      - name: Disallow empty Markdown links
        run: |
          ! grep ']()' **/*.md

  format-check:
    name: formatter-check
    runs-on: ubuntu-latest
    container: ghcr.io/fossas/haskell-dev-tools:9.4.7

    steps:
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: clippy, rustfmt

      - uses: actions/checkout@v2

      # Run the formatter
      - name: run fourmolu
        run: |
          make check-fmt

  cabal-format-check:
    name: cabal-format-check
    runs-on: ubuntu-latest
    container: ghcr.io/fossas/haskell-dev-tools:9.4.7

    steps:
      - uses: actions/checkout@v2

      # Run the formatter
      - name: "run cabal-fmt"
        run: |
          cabal-fmt --check spectrometer.cabal

  cabal-install-check:
    name: cabal-install-check
    runs-on: ubuntu-latest
    # Be sure to update the env var below
    container: ghcr.io/fossas/haskell-dev-tools:9.4.7

    env:
      GHC_VERSION: '9.4.7'

    steps:
      - uses: actions/checkout@v3

    # Compute cache key and save to a temporary file.
    #
    # We compute the cache key based on the solved install plan instead of just
    # hashing the `.cabal` file, since there are many kinds of changes that will
    # cause `.cabal` to change (e.g. adding new source modules).
    - name: Compute cache key
      id: compute-cache-key
      run: |
        cabal --project-file=cabal.project.ci update
        cabal --project-file=cabal.project.ci build --dry-run
        cat dist-newstyle/cache/plan.json | jq '."install-plan"[]."id"' | sort > /tmp/cabal-cache-key
        echo "Install plan:"
        cat /tmp/cabal-cache-key
        export CABAL_CACHE_KEY=$(sha256sum /tmp/cabal-cache-key | awk '{print $1}')
        echo "Cabal cache key: $CABAL_CACHE_KEY"
        echo "cabal-cache-key=$CABAL_CACHE_KEY" >> $GITHUB_OUTPUT

      # Run `cabal install`.
      - uses: actions/cache@v3
        name: Cache cabal store
        with:
          path: ${{ steps.setup-haskell.outputs.cabal-store || '~/.local/state/cabal' }}
          key: ${{ runner.os }}-${{ env.GHC_VERSION }}-cabal-cache-${{ steps.compute-cache-key.outputs.cabal-cache-key }}
          restore-keys: |
            ${{ runner.os }}-${{ env.GHC_VERSION }}-cabal-cache-
            ${{ runner.os }}-${{ env.GHC_VERSION }}-
            ${{ runner.os }}-

      - uses: actions/cache@v3
        name: Cache dist-newstyle
        with:
          path: ${{ github.workspace }}/dist-newstyle
          key: ${{ runner.os }}-${{ env.GHC_VERSION }}-dist-newstyle-${{ steps.compute-cache-key.outputs.cabal-cache-key }}
          restore-keys: |
            ${{ runner.os }}-${{ env.GHC_VERSION }}-dist-newstyle-
            ${{ runner.os }}-${{ env.GHC_VERSION }}-
            ${{ runner.os }}-

      # For some reason newer cabal or newer ghc doesn't prioritize cli options like -Wwarn over project file -Werror.
      # Because -Werror is specified in the project file, we get errors due to missing vendor binaries.
      # So edit the project file temporarily to not care about warnings.
      # This is what -Wwarn is supposed to do below.
      # We don't really lose anything here since it's run with -Werror in other workflows.
      - name: Delete ghc-options -Werror
        run: |
          sed -i '/ghc-options: -Werror/d' cabal.project.ci.linux

      - name: Run `cabal install`
        run: |
          apk add xz-dev bzip2-dev bzip2-static
          cabal update

          cabal install --project=cabal.project.ci.linux --ghc-options="-Wwarn"

  schema-lint-check:
    name: "schema lint check"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: json-syntax-check
        uses: limitusus/json-syntax-check@v1
        with:
          pattern: "docs.*\\.schema\\.json$"

  common-verbiage-check:
    name: "Check for correct spelling of FOSSA"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: "Check for incorrect FOSSA wording"
        run: |
          ! grep 'Fossa ' **/*.md
