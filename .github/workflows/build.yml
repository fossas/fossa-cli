# Build and test on each commit. Create a release on tagged commits.
#
# Binaries on each platform are stripped. This removes debug symbols.
name: Build
on: [push]

jobs:
  build-attribution-compat:
    name: build-attribution-compat
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
    - name: Set up Go 1.17.1
      uses: actions/setup-go@v2
      with:
        go-version: '1.17.1'
    
    - name: Check out commit
      uses: actions/checkout@v2
    
    - uses: actions/cache@v2
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Get dependencies
      run: go get -v -t -d ./...
    
    - name: Build attribution-compat
      run: |
        GOOS=windows go build -ldflags="-s -w" -o release/windows/compat-attribution.exe scripts/compat-attribution/main.go
        GOOS=linux go build -ldflags="-s -w" -o release/linux/compat-attribution scripts/compat-attribution/main.go
        GOOS=darwin go build -ldflags="-s -w" -o release/darwin/compat-attribution scripts/compat-attribution/main.go

    # Upload artifacts into the same path as the release step expects.

    - uses: actions/upload-artifact@v2
      with:
        name: Linux-binaries
        path: release/linux

    - uses: actions/upload-artifact@v2
      with:
        name: macOS-binaries
        path: release/darwin

    - uses: actions/upload-artifact@v2
      with:
        name: Windows-binaries
        path: release/windows

  build-all:
    name: ${{ matrix.os-name }}-build
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}

    defaults:
      run:
        shell: bash

    strategy:
      matrix:
        os: ['windows-latest', 'ubuntu-latest', 'macos-latest']
        include:
          - os: ubuntu-latest
            os-name: Linux
            container: fossa/haskell-static-alpine:ghc-8.10.4
            project-file: cabal.project.ci.linux
            ghc: '8.10.5'

          - os: macos-latest
            os-name: macOS
            project-file: cabal.project.ci.macos
            ghc: '8.10.4'

          - os: windows-latest
            os-name: Windows
            project-file: cabal.project.ci.windows
            ghc: '8.10.5'

    steps:
    - uses: actions/checkout@v2

    # Install tools used in `vendor_download.sh`.
    - name: Install alpine binary dependencies
      if: ${{ contains(matrix.os, 'ubuntu') }}
      shell: sh
      run: |
        apk add bash xz-dev bzip2-dev bzip2-static upx curl jq

    - name: Install MacOS binary dependencies
      if: ${{ contains(matrix.os, 'macos') }}
      run: |
        brew install upx jq

    # Set up Haskell.
    - uses: haskell/actions/setup@v1
      id: setup-haskell
      name: Setup ghc/cabal (non-alpine)
      if: ${{ !contains(matrix.os, 'ubuntu') }}
      with:
        ghc-version: ${{ matrix.ghc }}

    - name: Debugging information
      run: |
        ghc --version || echo "no ghc"
        cabal --version || echo "no cabal"
        ghcup --version || echo "no ghcup"

    # Build Spectrometer.
    - uses: actions/cache@v2
      name: Cache cabal store
      with:
        path: ${{ steps.setup-haskell.outputs.cabal-store || '~/.cabal/store' }}
        key: ${{ runner.os }}-${{ matrix.ghc }}-cabal-cache-${{ hashFiles('**/*.cabal') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.ghc }}-cabal-cache-
          ${{ runner.os }}-${{ matrix.ghc }}-
          ${{ runner.os }}-

    - name: Update vendored binaries
      run: |
        mkdir vendor-bins
        ./vendor_download.sh
      env:
        GITHUB_TOKEN: ${{ secrets.BASIS_ACCESS_TOKEN }}

    - name: Build
      # Occasionally, we run out of memory on the build process.
      # Since cabal uses incremental compilation, we can retry from where we left off
      #   by simply re-running cabal if we fail.
      env:
        RUN_CMD: cabal build --project-file=${{ matrix.project-file }} all
      run: |
        cabal update
        $RUN_CMD || $RUN_CMD

    - name: Run unit tests
      run: |
        cabal test --project-file=${{ matrix.project-file }} unit-tests

    # Save artifacts.
    - name: Find and move binaries (Windows)
      if: ${{ contains(matrix.os, 'windows') }}
      run: |
        mkdir release
        find . -type f -path '*/fossa/fossa.exe' -exec cp {} release \;
        find . -type f -path '*/pathfinder/pathfinder.exe' -exec cp {} release \;

    - name: Find and move binaries (non-Windows)
      if: ${{ !contains(matrix.os, 'windows') }}
      run: |
        mkdir release
        find . -type f -path '*/fossa/fossa' -exec cp {} release \;
        find . -type f -path '*/pathfinder/pathfinder' -exec cp {} release \;

    - name: Strip binaries
      run: |
        strip release/*

    - uses: actions/upload-artifact@v2
      with:
        name: ${{ runner.os }}-binaries
        path: release

  create-release:
    name: create-release
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    runs-on: ubuntu-latest
    needs: ['build-all', 'build-attribution-compat']

    steps:
    - uses: actions/download-artifact@v2

    - name: Get version
      id: get-version
      # This strips the 'v' prefix from the tag.
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\/v/}

    # This uses names compatible with our install script.
    - name: Bundle binaries
      run: |
        mkdir release

        ls -R

        chmod +x Linux-binaries/*
        zip -j release/fossa_${{ steps.get-version.outputs.VERSION }}_linux_amd64.zip Linux-binaries/fossa
        zip -j release/pathfinder_${{ steps.get-version.outputs.VERSION }}_linux_amd64.zip Linux-binaries/pathfinder
        zip -j release/compat-attribution_${{ steps.get-version.outputs.VERSION }}_linux_amd64.zip Linux-binaries/compat-attribution

        chmod +x macOS-binaries/*
        zip -j release/fossa_${{ steps.get-version.outputs.VERSION }}_darwin_amd64.zip macOS-binaries/fossa
        zip -j release/pathfinder_${{ steps.get-version.outputs.VERSION }}_darwin_amd64.zip macOS-binaries/pathfinder
        zip -j release/compat-attribution_${{ steps.get-version.outputs.VERSION }}_darwin_amd64.zip macOS-binaries/compat-attribution

        chmod +x Windows-binaries/*
        zip -j release/fossa_${{ steps.get-version.outputs.VERSION }}_windows_amd64.zip Windows-binaries/fossa.exe
        zip -j release/pathfinder_${{ steps.get-version.outputs.VERSION }}_windows_amd64.zip Windows-binaries/pathfinder.exe
        zip -j release/compat-attribution_${{ steps.get-version.outputs.VERSION }}_windows_amd64.zip Windows-binaries/compat-attribution.exe

    - name: Create checksums
      # We have to run from within the release dir so that "release" isn't prepended to the relative path of the zip file.
      run: |
        cd release
        sha256sum --binary "fossa_${{ steps.get-version.outputs.VERSION }}_linux_amd64.zip" > "fossa_${{ steps.get-version.outputs.VERSION }}_linux_amd64.zip.sha256"
        sha256sum --binary "fossa_${{ steps.get-version.outputs.VERSION }}_darwin_amd64.zip" > "fossa_${{ steps.get-version.outputs.VERSION }}_darwin_amd64.zip.sha256"
        sha256sum --binary "fossa_${{ steps.get-version.outputs.VERSION }}_windows_amd64.zip" > "fossa_${{ steps.get-version.outputs.VERSION }}_windows_amd64.zip.sha256"

        echo "Sanity-checking the checksums."

        cat *.sha256 | sha256sum --check --status

    - name: Release
      uses: softprops/action-gh-release@v1
      with:
        files: release/*
        draft: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
